// <auto-generated />
using System;
using CarManagementAPI.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarManagementAPI.Migrations
{
    [DbContext(typeof(CarDbContext))]
    [Migration("20240721103214_SeedSalesData")]
    partial class SeedSalesData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarManagementAPI.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CarManagementAPI.Models.CarModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfManufacturing")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CarModels");
                });

            modelBuilder.Entity("CarManagementAPI.Models.CommissionData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ClassACommission")
                        .HasColumnType("float");

                    b.Property<double>("ClassBCommission")
                        .HasColumnType("float");

                    b.Property<double>("ClassCCommission")
                        .HasColumnType("float");

                    b.Property<int>("FixedCommission")
                        .HasColumnType("int");

                    b.Property<int>("Threshold")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CommissionData");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Audi",
                            ClassACommission = 0.080000000000000002,
                            ClassBCommission = 0.059999999999999998,
                            ClassCCommission = 0.040000000000000001,
                            FixedCommission = 800,
                            Threshold = 25000
                        },
                        new
                        {
                            Id = 2,
                            Brand = "Jaguar",
                            ClassACommission = 0.059999999999999998,
                            ClassBCommission = 0.050000000000000003,
                            ClassCCommission = 0.029999999999999999,
                            FixedCommission = 750,
                            Threshold = 35000
                        },
                        new
                        {
                            Id = 3,
                            Brand = "Land Rover",
                            ClassACommission = 0.070000000000000007,
                            ClassBCommission = 0.050000000000000003,
                            ClassCCommission = 0.040000000000000001,
                            FixedCommission = 850,
                            Threshold = 30000
                        },
                        new
                        {
                            Id = 4,
                            Brand = "Renault",
                            ClassACommission = 0.050000000000000003,
                            ClassBCommission = 0.029999999999999999,
                            ClassCCommission = 0.02,
                            FixedCommission = 400,
                            Threshold = 20000
                        });
                });

            modelBuilder.Entity("CarManagementAPI.Models.PreviousYearSales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("LastYearSales")
                        .HasColumnType("float");

                    b.Property<string>("Salesman")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PreviousYearSales");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LastYearSales = 490000.0,
                            Salesman = "Salesman 1"
                        },
                        new
                        {
                            Id = 2,
                            LastYearSales = 1000000.0,
                            Salesman = "Salesman 2"
                        },
                        new
                        {
                            Id = 3,
                            LastYearSales = 650000.0,
                            Salesman = "Salesman 3"
                        });
                });

            modelBuilder.Entity("CarManagementAPI.Models.SalesData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ModelPrice")
                        .HasColumnType("float");

                    b.Property<int>("NumberOfCarsSold")
                        .HasColumnType("int");

                    b.Property<string>("Salesman")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SalesData");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Audi",
                            Class = "A",
                            ModelPrice = 30000.0,
                            NumberOfCarsSold = 1,
                            Salesman = "Salesman 1"
                        },
                        new
                        {
                            Id = 2,
                            Brand = "Jaguar",
                            Class = "A",
                            ModelPrice = 40000.0,
                            NumberOfCarsSold = 3,
                            Salesman = "Salesman 1"
                        },
                        new
                        {
                            Id = 3,
                            Brand = "Land Rover",
                            Class = "A",
                            ModelPrice = 35000.0,
                            NumberOfCarsSold = 0,
                            Salesman = "Salesman 1"
                        },
                        new
                        {
                            Id = 4,
                            Brand = "Renault",
                            Class = "A",
                            ModelPrice = 25000.0,
                            NumberOfCarsSold = 6,
                            Salesman = "Salesman 1"
                        },
                        new
                        {
                            Id = 5,
                            Brand = "Audi",
                            Class = "B",
                            ModelPrice = 28000.0,
                            NumberOfCarsSold = 2,
                            Salesman = "Salesman 1"
                        },
                        new
                        {
                            Id = 6,
                            Brand = "Jaguar",
                            Class = "B",
                            ModelPrice = 36000.0,
                            NumberOfCarsSold = 4,
                            Salesman = "Salesman 1"
                        },
                        new
                        {
                            Id = 7,
                            Brand = "Land Rover",
                            Class = "B",
                            ModelPrice = 32000.0,
                            NumberOfCarsSold = 2,
                            Salesman = "Salesman 1"
                        },
                        new
                        {
                            Id = 8,
                            Brand = "Renault",
                            Class = "B",
                            ModelPrice = 22000.0,
                            NumberOfCarsSold = 2,
                            Salesman = "Salesman 1"
                        },
                        new
                        {
                            Id = 9,
                            Brand = "Audi",
                            Class = "C",
                            ModelPrice = 26000.0,
                            NumberOfCarsSold = 3,
                            Salesman = "Salesman 1"
                        },
                        new
                        {
                            Id = 10,
                            Brand = "Jaguar",
                            Class = "C",
                            ModelPrice = 34000.0,
                            NumberOfCarsSold = 6,
                            Salesman = "Salesman 1"
                        },
                        new
                        {
                            Id = 11,
                            Brand = "Land Rover",
                            Class = "C",
                            ModelPrice = 31000.0,
                            NumberOfCarsSold = 1,
                            Salesman = "Salesman 1"
                        },
                        new
                        {
                            Id = 12,
                            Brand = "Renault",
                            Class = "C",
                            ModelPrice = 21000.0,
                            NumberOfCarsSold = 1,
                            Salesman = "Salesman 1"
                        },
                        new
                        {
                            Id = 13,
                            Brand = "Audi",
                            Class = "A",
                            ModelPrice = 30000.0,
                            NumberOfCarsSold = 0,
                            Salesman = "Salesman 2"
                        },
                        new
                        {
                            Id = 14,
                            Brand = "Jaguar",
                            Class = "A",
                            ModelPrice = 40000.0,
                            NumberOfCarsSold = 5,
                            Salesman = "Salesman 2"
                        },
                        new
                        {
                            Id = 15,
                            Brand = "Land Rover",
                            Class = "A",
                            ModelPrice = 35000.0,
                            NumberOfCarsSold = 5,
                            Salesman = "Salesman 2"
                        },
                        new
                        {
                            Id = 16,
                            Brand = "Renault",
                            Class = "A",
                            ModelPrice = 25000.0,
                            NumberOfCarsSold = 3,
                            Salesman = "Salesman 2"
                        },
                        new
                        {
                            Id = 17,
                            Brand = "Audi",
                            Class = "B",
                            ModelPrice = 28000.0,
                            NumberOfCarsSold = 0,
                            Salesman = "Salesman 2"
                        },
                        new
                        {
                            Id = 18,
                            Brand = "Jaguar",
                            Class = "B",
                            ModelPrice = 36000.0,
                            NumberOfCarsSold = 4,
                            Salesman = "Salesman 2"
                        },
                        new
                        {
                            Id = 19,
                            Brand = "Land Rover",
                            Class = "B",
                            ModelPrice = 32000.0,
                            NumberOfCarsSold = 2,
                            Salesman = "Salesman 2"
                        },
                        new
                        {
                            Id = 20,
                            Brand = "Renault",
                            Class = "B",
                            ModelPrice = 22000.0,
                            NumberOfCarsSold = 2,
                            Salesman = "Salesman 2"
                        },
                        new
                        {
                            Id = 21,
                            Brand = "Audi",
                            Class = "C",
                            ModelPrice = 26000.0,
                            NumberOfCarsSold = 0,
                            Salesman = "Salesman 2"
                        },
                        new
                        {
                            Id = 22,
                            Brand = "Jaguar",
                            Class = "C",
                            ModelPrice = 34000.0,
                            NumberOfCarsSold = 2,
                            Salesman = "Salesman 2"
                        },
                        new
                        {
                            Id = 23,
                            Brand = "Land Rover",
                            Class = "C",
                            ModelPrice = 31000.0,
                            NumberOfCarsSold = 1,
                            Salesman = "Salesman 2"
                        },
                        new
                        {
                            Id = 24,
                            Brand = "Renault",
                            Class = "C",
                            ModelPrice = 21000.0,
                            NumberOfCarsSold = 1,
                            Salesman = "Salesman 2"
                        },
                        new
                        {
                            Id = 25,
                            Brand = "Audi",
                            Class = "A",
                            ModelPrice = 30000.0,
                            NumberOfCarsSold = 4,
                            Salesman = "Salesman 3"
                        },
                        new
                        {
                            Id = 26,
                            Brand = "Jaguar",
                            Class = "A",
                            ModelPrice = 40000.0,
                            NumberOfCarsSold = 2,
                            Salesman = "Salesman 3"
                        },
                        new
                        {
                            Id = 27,
                            Brand = "Land Rover",
                            Class = "A",
                            ModelPrice = 35000.0,
                            NumberOfCarsSold = 1,
                            Salesman = "Salesman 3"
                        },
                        new
                        {
                            Id = 28,
                            Brand = "Renault",
                            Class = "A",
                            ModelPrice = 25000.0,
                            NumberOfCarsSold = 6,
                            Salesman = "Salesman 3"
                        },
                        new
                        {
                            Id = 29,
                            Brand = "Audi",
                            Class = "B",
                            ModelPrice = 28000.0,
                            NumberOfCarsSold = 2,
                            Salesman = "Salesman 3"
                        },
                        new
                        {
                            Id = 30,
                            Brand = "Jaguar",
                            Class = "B",
                            ModelPrice = 36000.0,
                            NumberOfCarsSold = 7,
                            Salesman = "Salesman 3"
                        },
                        new
                        {
                            Id = 31,
                            Brand = "Land Rover",
                            Class = "B",
                            ModelPrice = 32000.0,
                            NumberOfCarsSold = 2,
                            Salesman = "Salesman 3"
                        },
                        new
                        {
                            Id = 32,
                            Brand = "Renault",
                            Class = "B",
                            ModelPrice = 22000.0,
                            NumberOfCarsSold = 3,
                            Salesman = "Salesman 3"
                        },
                        new
                        {
                            Id = 33,
                            Brand = "Audi",
                            Class = "C",
                            ModelPrice = 26000.0,
                            NumberOfCarsSold = 0,
                            Salesman = "Salesman 3"
                        },
                        new
                        {
                            Id = 34,
                            Brand = "Jaguar",
                            Class = "C",
                            ModelPrice = 34000.0,
                            NumberOfCarsSold = 1,
                            Salesman = "Salesman 3"
                        },
                        new
                        {
                            Id = 35,
                            Brand = "Land Rover",
                            Class = "C",
                            ModelPrice = 31000.0,
                            NumberOfCarsSold = 3,
                            Salesman = "Salesman 3"
                        },
                        new
                        {
                            Id = 36,
                            Brand = "Renault",
                            Class = "C",
                            ModelPrice = 21000.0,
                            NumberOfCarsSold = 1,
                            Salesman = "Salesman 3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CarManagementAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CarManagementAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarManagementAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CarManagementAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
